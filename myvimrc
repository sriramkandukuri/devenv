source ~/.cocvrc
if !has('nvim')
    set runtimepath^=~/.vim runtimepath+=~/.vim/after
    let &packpath = &runtimepath
endif

set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath
let mapleader = " "
set hidden
set noerrorbells
set autoread

syntax on
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent

set nowrap
set smartcase
set noswapfile
set nobackup

set undodir=~/.vim/undodir
set undofile

set incsearch
set hlsearch

set colorcolumn=100
set cursorline
set cursorcolumn

set number
set relativenumber

"menu and tab rotate for commandline mode
set wildmenu
set wildignorecase
set mouse=a
""VH |FnKey F11|Toggle mouse
map <F11> <ESC>:exec &mouse!="" ? "set mouse=" : "set mouse=a"<CR>
""VH |Shift+FnKey F11|Toggle mouse and number sign columns this is usefull for copying using mouse selection
function! ToggleSignColumn()
    if !exists("b:signcolumn_on") || b:signcolumn_on
        set signcolumn=no
        let b:signcolumn_on=0
    else
        set signcolumn=auto
        let b:signcolumn_on=1
    endif
endfunction
function ToggleNUSCL()
    set rnu!
    set nu!
    call ToggleSignColumn()
endfunction
function ToggleMouseCopying()
    if &mouse != ""
        set mouse=
    else
        set mouse=a
    endif

    set rnu!
    set nu!
    call ToggleSignColumn()
endfunction
map <S-F11> :call ToggleMouseCopying()<CR>
""VH |Ctrl + FnKey F11|Toggle number and sign columns without changing mouse state
map <C-F11> :call ToggleNUSCL()<CR>


set spelllang=en
if has("spell")
  " turn spelling on by default
  " set spell

  " toggle spelling with F7 key
""VH |FnKey F7|Toggle spell check and show errors|
""VH |[s, ]s, [S, ]S|Goto Next or previous spellcheck errors|
  map <F7> :set spell!<CR><Bar>:echo "Spell Check: " . strpart("OffOn", 3 * &spell, 3)<CR>

  " they were using white on white
  highlight PmenuSel ctermfg=black ctermbg=lightgray

  " limit it to just the top 10 items
  set sps=best,10
endif

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=50

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

""VH |Space+v+r|Reload vimrc|
nnoremap <Leader>vr :source $MYVIMRC<CR>

"{{{
" PLUGINS
"
" its a simple plugin manager for vim
"   https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plugged')
"Code completers
Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}

"Plug 'ycm-core/YouCompleteMe'
if has('nvim')

    " Plug 'neovim/nvim-lspconfig'
    " Plug 'nvim-lua/completion-nvim'
    " Plug 'nvim-lua/diagnostic-nvim'
    " Plug 'tjdevries/nlua.nvim'
    " Plug 'tjdevries/lsp_extensions.nvim'

    " Neovim Tree shitter
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    Plug 'nvim-treesitter/playground'
endif
"dracula themes
"   https://github.com/dracula/vim.git
Plug 'https://github.com/dracula/vim.git', {'as':'dracula'}

" https://github.com/rafi/awesome-vim-colorschemes
Plug 'rafi/awesome-vim-colorschemes'
Plug 'rainglow/vim', {'as':'rg-colors'}
Plug 'morhetz/gruvbox'
"Vim status line themes
Plug 'vim-airline/vim-airline-themes'
Plug 'https://github.com/vim-airline/vim-airline.git'
" Directory diff plugin aalternative for meld
Plug 'will133/vim-dirdiff'
"Fast file grep from vim command :Rg
Plug 'jremmen/vim-ripgrep'
"Git helpers :Git
"   https://github.com/tpope/vim-fugitive
Plug 'tpope/vim-fugitive'
" Some good toggle and paris configutions. help :
Plug 'tpope/vim-unimpaired'
" Better automated and command based autofilling of braces and surround pairs
Plug 'tpope/vim-surround'
" Easy commenting
Plug 'tpope/vim-commentary'
" `.` repeats all plugin actions instead of native commands only
Plug 'tpope/vim-repeat'
" Some additional help to netrw
"   https://github.com/tpope/vim-vinegar
Plug 'tpope/vim-vinegar'
" Some good defaults but overwriting some custome settings. Currently disabled.
" Plug 'tpope/vim-sensible'
" taglist side bar for C/C++
Plug 'yegappan/taglist'

Plug 'preservim/tagbar'

" Copied
Plug 'leafgarland/typescript-vim'
"Beautiful manpages for vim. K or :Man
Plug 'vim-utils/vim-man'
Plug 'lyuts/vim-rtags'

"Undo tree with good history.
Plug 'mbbill/undotree'

" multi cursor some times very usefull
"   https://github.com/terryma/vim-multiple-cursors
Plug 'terryma/vim-multiple-cursors'

"   https://github.com/junegunn/gv.vim
Plug 'junegunn/gv.vim'
" fzf with ripgrep
"   https://github.com/junegunn/fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
"   https://github.com/junegunn/fzf.vim
Plug 'junegunn/fzf.vim'

" Beautiful tables in vim
Plug 'dhruvasagar/vim-table-mode'
" RFC helper for vim
Plug 'mhinz/vim-rfc'

" helper for key mappings
"   https://github.com/liuchengxu/vim-which-key
" Plug 'liuchengxu/vim-which-key'

" helper for quickly go to a word in a line
"   https://github.com/unblevable/quick-scope
Plug 'unblevable/quick-scope'

" Automatic pairing of branckets and quotes
"   https://github.com/jiangmiao/auto-pairs
Plug 'jiangmiao/auto-pairs'

" UML syntax and refresh plugins
Plug 'aklt/plantuml-syntax'
Plug 'weirongxu/plantuml-previewer.vim'

" Markdown preview plugin
"   https://github.com/iamcco/markdown-preview.nvim
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

" toml plugin used for hugo sites
"   https://github.com/cespare/vim-toml
Plug 'cespare/vim-toml'

Plug 'vim-scripts/DoxygenToolkit.vim'

" Fade inactive buffers
"   https://github.com/TaDaa/vimade
Plug 'TaDaa/vimade'

" Tmux focus events to vim properly
"   https://github.com/tmux-plugins/vim-tmux-focus-events
Plug 'tmux-plugins/vim-tmux-focus-events'

" Some usefull snippets
"   https://github.com/honza/vim-snippets
Plug 'honza/vim-snippets'

" Split single block statements or join multiline statements to single line.
"   https://github.com/AndrewRadev/splitjoin.vim
Plug 'AndrewRadev/splitjoin.vim'

" clang formatting plugin
"   https://github.com/rhysd/vim-clang-format
Plug 'rhysd/vim-clang-format'

call plug#end()
"
"}}}
"

"{{{
"
let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}

" map to <Leader>cf in C++ code
""VH |Space+=|Format file or visual selection wrt clang definitions
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>= :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>= :ClangFormat<CR>
" if you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>

"
"}}}


"{{{ cscope shortcuts
"
""VH |Space+c+a|Connect to cscope db using already existing cscope.out file
nnoremap <Leader>co :cs a cscope.out<CR>

""VH |Space+c+s|Find this C symbol
nnoremap  <Leader>cs :cs f s <cword><CR>
""VH |Space+c+g|Find this definition
nnoremap  <Leader>cg :cs f g <cword><CR>
""VH |Space+c+d|Find functions called by this function
nnoremap  <Leader>cd :cs f d <cword><CR>
""VH |Space+c+c|Find functions calling this function
nnoremap  <Leader>cc :cs f c <cword><CR>
""VH |Space+c+t|Find this text string
nnoremap  <Leader>ct :cs f t <cword><CR>
""VH |Space+c+e|Find this egrep pattern
nnoremap  <Leader>ce :cs f e <cword><CR>
""VH |Space+c+f|Find this file
nnoremap  <Leader>cf :cs f f <cword><CR>
""VH |Space+c+i|Find files #including this file
nnoremap  <Leader>ci :cs f i <cword><CR>

"}}}



""{{{
"" ccls nvim inbuild lsp configuration
"" Register ccls C++ lanuage server.
let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']
" lua << EOF
"   require('lspconfig').ccls.setup({
"     settings = {
"         root_dir = root_pattern("compile_commands.json", "compile_flags.txt", ".git", ".ccls")
"     },
"     on_attach = require'completion'.on_attach
"   })
" EOF
" lua require'lspconfig'.tsserver.setup{ on_attach=require'completion'.on_attach }
" lua require'lspconfig'.clangd.setup{ on_attach=require'completion'.on_attach }
" lua require'lspconfig'.ccls.setup{ on_attach=require'completion'.on_attach }
" lua require'lspconfig'.pyls.setup{ on_attach=require'completion'.on_attach }
" lua require'lspconfig'.gopls.setup{ on_attach=require'completion'.on_attach }
" lua require'lspconfig'.rust_analyzer.setup{ on_attach=require'completion'.on_attach }
""}}}

" {{{
"
if has('nvim')
:lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = {"rust" },  -- list of language that will be disabled
  },
}
EOF
endif

"
" }}}

"{{{ Vimade fading level
"
let g:vimade = {}
let g:vimade.fadelevel = 0.6
let g:vimade.enablesigns = 1
"
"}}}

" {{{ Tag bar configuration
""VH |FnKey F8|Toggle right side tagbar for all *.c,*.cpp,*.h,*.hpp files|
nmap <F8> :TagbarToggle<CR>
let g:tagbar_show_linenumbers = 2
let g:tagbar_show_data_type = 1
let g:tagbar_sort = 0
" augroup TAGBar
"     autocmd FileType c,cpp,h,hpp :TagbarOpen
" augroup END
" }}}


" Markdown preview plugin options {{{
"
" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 0

" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 1

" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be use for all files,
" by default it can be use in markdown file
" default: 0
let g:mkdp_command_for_global = 0

" set to 1, preview server available to others in your network
" by default, the server listens on localhost (127.0.0.1)
" default: 0
let g:mkdp_open_to_the_world = 0

" use custom IP to open preview page
" useful when you work in remote vim and preview on local browser
" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
" default empty
let g:mkdp_open_ip = ''

" specify browser to open preview page
" default: ''
let g:mkdp_browser = ''

" set to 1, echo preview page url in command line when open preview page
" default is 0
let g:mkdp_echo_preview_url = 0

" a custom vim function name to open preview page
" this function will receive url as param
" default is empty
let g:mkdp_browserfunc = ''

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
" content_editable: if enable content editable for preview page, default: v:false
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false
    \ }

" use a custom markdown style must be absolute path
" like '/Users/username/markdown.css' or expand('~/markdown.css')
let g:mkdp_markdown_css = ''

" use a custom highlight style must absolute path
" like '/Users/username/highlight.css' or expand('~/highlight.css')
let g:mkdp_highlight_css = ''

" use a custom port to start server or random for empty
let g:mkdp_port = ''

" preview page title
" ${name} will be replace with the file name
let g:mkdp_page_title = '「${name}」'

"
" }}}

" Dir diff options
let g:DirDiffEnableMappings = 1
let g:DirDiffExcludes = "cscope.files,cscope.out,tags,*.o,*.so,*.a,CVS,*.class,*.exe,.*.swp,*.git*"
let g:DirDiffIgnore = "Id:,Revision:,Date:"
let g:DirDiffAddArgs = "-w -B"
set diffopt+=iwhite
set diffexpr=MyDiff()
function MyDiff()
    let opt = ""
    if &diffopt =~ "icase"
        let opt = opt . "-i "
    endif
    if &diffopt =~ "iwhite"
        let opt = opt . "-w -B " " vim uses -b by default
    endif
    silent execute "!diff -a --binary " . opt .
                \ v:fname_in . " " . v:fname_new .  " > " . v:fname_out
endfunction
""VH |w,s,d|Ignore white space in diff windows, remember 'w'hite 's'pace 'd'isable|
map wsd :set diffopt+=iwhite<CR>
""VH |w,s,e|Shows white space in diff windows, remember 'w'hite 's'pace 'e'nable|
map wse :set diffopt-=iwhite<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"global options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
silent! colorscheme dracula

" ============================================================================
" QUICK SCOPE {{{
" ============================================================================
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
augroup qs_colors
  autocmd!
  autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
  autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
augroup END
""VH |Space+q|Toggle quick scope plugin which enables visual marking while using `t` shortcut to go to any position of line|
nmap <leader>q <plug>(QuickScopeToggle)
xmap <leader>q <plug>(QuickScopeToggle)
let g:qs_enable=1
" }}}

" ============================================================================
" WHICH KEY {{{
" ============================================================================
" nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
" By default timeoutlen is 1000 ms
" set timeoutlen=500
" }}}

" ============================================================================
" FZF {{{
" ============================================================================

if has('nvim') || has('gui_running')
  let $FZF_DEFAULT_OPTS .= ' --inline-info'
endif


" All files
command! -nargs=? -complete=dir AF
  \ call fzf#run(fzf#wrap(fzf#vim#with_preview({
  \   'source': 'fd --type f --hidden --follow --exclude .git --no-ignore . '.expand(<q-args>)
  \ })))

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Terminal buffer options for fzf
autocmd! FileType fzf
autocmd  FileType fzf set noshowmode noruler nonu

" if exists('$TMUX')
"   let g:fzf_layout = { 'tmux': '-p90%,60%' }
" endif

" nnoremap <silent> <Leader><Leader> :Files<CR>
""VH |Space+Space|Search through files, enter to open selected file|
nnoremap <silent> <expr> <Leader><Leader> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Files\<CR>"
""VH |Space+C|Search through available color schemes and activate upon enter|
nnoremap <silent> <Leader>C        :Colors<CR>
""VH |Space+<ENTER>|Search through available buffers and enter to open selected one|
nnoremap <silent> <Leader><Enter>  :Buffers<CR>
""VH |Space+L|Search through lines having some pattern you enter|
nnoremap <silent> <Leader>L        :Lines<CR>
""VH |Space+f|Invoke ripgrep|
nnoremap <silent> <Leader>f       :RG <C-R><C-W><CR>
""VH |Space+RG|Invoke ripgrep|
nnoremap <silent> <Leader>RG       :RG <C-R><C-A><CR>
""VH |Space+ag|Invoke advance grep|
xnoremap <silent> <Leader>ag       y:Ag <C-R>"<CR>
""VH |Space+\`|Search through available marks and enter into selected one|
nnoremap <silent> <Leader>`        :Marks<CR>
""VH |Space+m|Search though maps/available shortcuts and use selected one|
nnoremap <silent> <Leader>m        :Maps<CR>
" nnoremap <silent> q: :History:<CR>
" nnoremap <silent> q/ :History/<CR>

inoremap <expr> <c-x><c-t> fzf#complete('tmuxwords.rb --all-but-current --scroll 500 --min 5')
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
inoremap <expr> <c-x><c-d> fzf#vim#complete#path('blsd')
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" nmap <leader><tab> <plug>(fzf-maps-n)
" xmap <leader><tab> <plug>(fzf-maps-x)
" omap <leader><tab> <plug>(fzf-maps-o)

function! s:plug_help_sink(line)
  let dir = g:plugs[a:line].dir
  for pat in ['doc/*.txt', 'README.md']
    let match = get(split(globpath(dir, pat), "\n"), 0, '')
    if len(match)
      execute 'tabedit' match
      return
    endif
  endfor
  tabnew
  execute 'Explore' dir
endfunction

command! PlugHelp call fzf#run(fzf#wrap({
  \ 'source': sort(keys(g:plugs)),
  \ 'sink':   function('s:plug_help_sink')}))

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -g "!tags" -g "!cscope.out" %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let options = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  let options = fzf#vim#with_preview(options, 'right', 'ctrl-/')
  call fzf#vim#grep(initial_command, 1, options, a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   "rg --column --line-number --no-heading --color=always --smart-case -- ".shellescape(<q-args>), 1,
  \   fzf#vim#with_preview('right', 'ctrl-/'), <bang>0)

command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>, fzf#vim#with_preview('right', 'ctrl-/'), <bang>0)

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Airline plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
if $USE_PWR_FONTS == 1
    let g:airline_powerline_fonts = 1
endif
let g:airline_theme='dracula'
let g:airline#extensions#tabline#enabled = 1
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.dirty=' !'
let g:airline_symbols.whitespace = ''

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"You complete me plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_show_diagnostics_ui = 1
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_config.py'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"coc plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" coc config
let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-eslint',
  \ 'coc-prettier',
  \ 'coc-json',
  \ 'coc-cmake',
  \ 'coc-ccls',
  \ 'coc-clangd',
  \ 'coc-prettier',
  \ ]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"vimman plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Default K mapping to man remapped to vim-man
""VH |K|In escame mode pressing `K` on any word opens respective man/help page if available|
map K <Plug>(Man)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"ripgrep plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if executable('rg')
    let g:rg_derive_root='true'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"ctrlp file search plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_use_caching = 0
let g:ctrlp_working_path_mode = 'ra'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"netrw source tree browser plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:netrw_browse_split = 4
let g:netrw_winsize = -30
let g:netrw_liststyle = 3
"let g:netrw_browse_split = 4
"let g:netrw_altv = 1
""VH |-, Space+pv|Open directory browser as split window on left side|
function! ToggleVimExplorer()
    let i = bufnr("$")
    let wasOpen = 0
    while (i >= 1)
        if (getbufvar(i, "&filetype") == "netrw")
            silent exe "bwipeout " . i
            let wasOpen = 1
        endif
        let i-=1
    endwhile
    if !wasOpen
        silent Lexplore
        wincmd l
    endif
endfunction

nnoremap - :call ToggleVimExplorer()<cr>
"nnoremap - :wincmd v<bar> :Ex <bar> :vertical resize 30<CR>
nnoremap <leader>pv :wincmd v<bar> :Ex <bar> :vertical resize 30<CR>
function PDrawAUCMD()
    :Vex
    :wincmd l
endfunction
" augroup ProjectDrawer
"   autocmd!
"   autocmd VimEnter * call ToggleVimExplorer()
" augroup END

" {{{ Buffer management
""VH |Space+\<TAB\>|Goto next buffer opened|
map <leader><Tab> :bn<cr>
""VH |Space+Shift+\<TAB\>|Goto previous buffer opened|
map <leader><S-Tab> :bp<cr>
""VH |Ctrl+w|Close opened current buffer|
nnoremap <C-w> :bd<cr>
""VH |Ctrl+s|Save file|
noremap <C-s> :w<cr>
inoremap <C-s> <C-o>:w<cr>
" }}}
""VH |Space+//|Comment out current line or visual selection|
nnoremap <leader>// :Commentary<cr>
vnoremap <leader>// :Commentary<cr>
""VH |Space+8|Add doxygen style comments before current line|
nnoremap <leader>8 :Dox<cr>
""VH |Space+`\`|Append line end comments Use only for c style doxygen comments for structure or parameter variables.|
nnoremap <leader>\ :set paste <ESC>:norm A/**<  */<ESC>:set nopaste<ESC><Left><Left><ESC>i

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Generic mappings
""VH |Space+T|Enter timestamp at cursor position|
nmap <Leader>T i<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"split window movement mappings
""VH |Space+h|Goto left window|
nnoremap <leader>h :wincmd h<CR>
""VH |Space+j|Goto below window|
nnoremap <leader>j :wincmd j<CR>
""VH |Space+k|Goto above window|
nnoremap <leader>k :wincmd k<CR>
""VH |Space+l|Goto right window|
nnoremap <leader>l :wincmd l<CR>
""VH |Space+u|show undo tree in spliview|
nnoremap <leader>u :UndotreeShow<CR>
""VH |Space+`+`|Increase vertical width of window by 5 points|
nnoremap <silent> <Leader>+ :vertical resize +5<CR>
""VH |Space+`-`|Decrease vertical width of window by 5 points|
nnoremap <silent> <Leader>- :vertical resize -5<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"File base clipboard
""VH |Space+y|Copy selected text to some temporary file, use this for copy pasting between files opened in different shells|
vmap <leader>y :w! /tmp/vitmp<CR>
""VH |Space+p|Paste copied(using Space+y) text, use this for copy pasting between files opened in different shells|
nmap <leader>p :r! cat /tmp/vitmp<CR>

"Some helper functions
fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

function ShowSpaces(...)
  let @/='\v(\s+$)|( +\ze\t)'
  let oldhlsearch=&hlsearch
  if !a:0
    let &hlsearch=!&hlsearch
  else
    let &hlsearch=a:1
  end
  return oldhlsearch
endfunction

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

fun! GoYCM()
    nnoremap <buffer> <silent> <leader>gd :YcmCompleter GoTo<CR>
    nnoremap <buffer> <silent> <leader>gr :YcmCompleter GoToReferences<CR>
    nnoremap <buffer> <silent> <leader>rr :YcmCompleter RefactorRename<space>
endfun
""VH |\<TAB\>|Autocompleter if available|
fun! GoCoc()
    inoremap <buffer> <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ coc#refresh()
""VH |Shift+\<TAB\>|Select previous from autocomplete dropdown|
    inoremap <buffer> <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
""VH |Ctrl+Space|refresh CoC database|
    inoremap <buffer> <silent><expr> <C-space> coc#refresh()

    " GoTo code navigation.
""VH |Space+gd|Goto definition of a function|
    nmap <buffer> <leader>gd <Plug>(coc-definition)
""VH |Space+gy|Goto type declaration of a function|
    nmap <buffer> <leader>gy <Plug>(coc-type-definition)
""VH |Space+gi|Goto implementation of a function|
    nmap <buffer> <leader>gi <Plug>(coc-implementation)
""VH |Space+gr|Show references|
    nmap <buffer> <leader>gr <Plug>(coc-references)
""VH |Space+cr|Restart CoC|
    nnoremap <buffer> <leader>cr :CocRestart
endfun

function TrimSpaces() range
  let oldhlsearch=ShowSpaces(1)
  execute a:firstline.",".a:lastline."substitute ///gec"
  let &hlsearch=oldhlsearch
endfunction

command -bar -nargs=? ShowSpaces call ShowSpaces(<args>)
command -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call TrimSpaces()
""VH |FnKey F12|Show trailing spaces in a file|
nnoremap <F12>     :ShowSpaces 1<CR>
""VH |Shift+FnKey F12|Remove trailing spaces on a selected text|
nnoremap <S-F12>   m`:TrimSpaces<CR>``
vnoremap <S-F12>   :TrimSpace<CR>

set clipboard=unnamedplus
"set clipboard=exclude:.*
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

" Better split line

set encoding=utf8
set fillchars=vert:│
highlight VertSplit cterm=NONE ctermfg=237 guifg=#5f5f9f ctermbg=NONE

" Table plugin customizations

function! s:isAtStartOfLine(mapping)
  let text_before_cursor = getline('.')[0 : col('.')-1]
  let mapping_pattern = '\V' . escape(a:mapping, '\')
  let comment_pattern = '\V' . escape(substitute(&l:commentstring, '%s.*$', '', ''), '\')
  return (text_before_cursor =~? '^' . ('\v(' . comment_pattern . '\v)?') . '\s*\v' . mapping_pattern . '\v$')
endfunction

""VH |`\|\|`|In insert mode type two pipe symbols and ESC to activate table writitng|
""VH |`__`|In insert mode type two underscore symbols and ESC to disable table writitng|
inoreabbrev <expr> <bar><bar>
          \ <SID>isAtStartOfLine('\|\|') ?
          \ '<c-o>:TableModeEnable<cr><bar><space><bar><left><left>' : '<bar><bar>'
inoreabbrev <expr> __
          \ <SID>isAtStartOfLine('__') ?
          \ '<c-o>:silent! TableModeDisable<cr>' : '__'

let g:table_mode_corner='|'

""""""""""""""""""""""""""""""""""""""""""""""""""
" Common color scheme settings
"
" use the dark theme
set background=dark
set termguicolors

"""""""""""""""""""""""""""""""""""""""""""""""""
" Dracula customizations.
function SetColors()
    hi ColorColumn ctermbg=234 guibg=#2f2f2f
    hi CursorLine ctermbg=234 guibg=#2f2f2f
    hi CursorColumn ctermbg=234 guibg=#2f2f2f
    hi DraculaComment ctermfg=75  guifg=#7a7f40
    hi LineNr ctermfg=237 guifg=#8f8f8f ctermbg=235 guibg=#2f2f2f
    hi CursorLineNr guibg=#ffe5b9 guifg=#000000
    hi DraculaSubtle ctermbg=235  guibg=#2f2f2f
    hi DiffAdd guibg=#8fff33 guifg=#0f0f0f
    hi DiffChange guibg=#ffb700 guifg=#0f0f0f
    hi DiffDelete guibg=#fe0808 guifg=#f0f0f0
    hi Pmenu ctermbg=gray guibg=#5e456e
    hi CocFloating guibg=#4a2661
    hi CocErrorFloat guibg=#8f1c1c
    hi PmenuSel guibg=#a05000
    hi Normal ctermbg=NONE  guibg=NONE
endfunction
let g:dracula_bold = 1
let g:dracula_italic = 1
let g:dracula_underline = 1
let g:dracula_undercurl = 1
let g:dracula_inverse = 1
let g:dracula_colorterm = 1
call SetColors()
function SetDiffColors()
    colorscheme=dracula
    set background=dark
    set termguicolors
    call SetColors()
    hi DiffAdd guibg=#0f380f
    hi DiffChange guibg=#3f2f0f
    hi DiffDelete guibg=#3f0f0f guifg=#30000f
endfunction
autocmd FileType dirdiff :call SetDiffColors()

""""""""""""""""""""""""""""""""""""""""""""""""""""
" Gruvbox customizations

let g:gruvbox_italic = 1
let g:gruvbox_improved_warnings = 1
let g:gruvbox_improved_strings = 1


"Trim white spaces before saving
"autocmd BufWritePre * :call TrimWhitespace()
"Enable YCM for type script
autocmd FileType typescript :call GoYCM()
"Enable YCM for c c++
autocmd FileType cpp,cxx,h,hpp,c :call GoCoc()
"Remember line position
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

""""""""""""""""""""""""""""""""""""""""""""""""""""
" Doxygen customizations
let g:DoxygenToolkit_authorName="Sriram.K"

" Redirect any command output
function! Redir(cmd, rng, start, end)
	for win in range(1, winnr('$'))
		if getwinvar(win, 'scratch')
			execute win . 'windo close'
		endif
	endfor
	if a:cmd =~ '^!'
		let cmd = a:cmd =~' %'
			\ ? matchstr(substitute(a:cmd, ' %', ' ' . expand('%:p'), ''), '^!\zs.*')
			\ : matchstr(a:cmd, '^!\zs.*')
		if a:rng == 0
			let output = systemlist(cmd)
		else
			let joined_lines = join(getline(a:start, a:end), '\n')
			let cleaned_lines = substitute(shellescape(joined_lines), "'\\\\''", "\\\\'", 'g')
			let output = systemlist(cmd . " <<< $" . cleaned_lines)
		endif
	else
		redir => output
		execute a:cmd
		redir END
		let output = split(output, "\n")
	endif
	vnew
	let w:scratch = 1
	setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile
	call setline(1, output)
endfunction

command! -nargs=1 -complete=command -bar -range Redir silent call Redir(<q-args>, <range>, <line1>, <line2>)
""VH |Space+h+m|List all currently used maps to temporary buffer"
nnoremap <Leader>hm :Redir verbose map<CR>
""VH |Space+h+m|List all currently used highlights to temporary buffer"
nnoremap <Leader>hhi :Redir hi<CR>
